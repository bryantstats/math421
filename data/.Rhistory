#
# Combine all the result in 1 variable
b = rbind(bt0, bte0)
# Some Plots
# b %>% filter(data == 'Test') %>% ggplot(aes(x = mm, y = Balanced_Accuracy, color = factor(kk)))+
#   geom_point()
#
g1 = ggplot(b, aes(y=Balanced_Accuracy, x=mm, color = data)) +
geom_point()
ggsave(paste0('g1', rnorm(1), '.png'), g1)
return(b)
}
result2 = function(repp = 200, id = data)
# Plot barchart of all resampling methods
# Return the performance matrix
{
set.seed(2019)
library(caret)
splitIndex <- createDataPartition(id$target, p = .7, list = FALSE, times = 1)
train <- id[ splitIndex,]
test <- id[-splitIndex,]
#Balancing data
library(ROSE)
library(smotefamily)
#oversampling
i1 = train[train$target=='x1',]
i0 = train[train$target=='x0',]
i11 = i1[sample(1:nrow(i1), nrow(i0), replace = TRUE),]
train.o <- rbind(i11, i0)
#undersampling
#oversampling
i00 = i0[sample(1:nrow(i0), nrow(i1), replace = TRUE),]
train.u <- rbind(i1, i00)
#SMOTE
library(smotefamily)
train.s = SMOTE(train[,-1], train[,1])$data
names(train.s)[length(names(train.s))]='target'
#ANS
train.ans = ANS(train[,-1], train[,1])$data
names(train.ans)[length(names(train.ans))]='target'
#BLS
train.bls = BLSMOTE(train[,-1], train[,1])$data
names(train.bls)[length(names(train.bls))]='target'
#dbs
train.dbs = DBSMOTE(train[,-1], train[,1])$data
names(train.dbs)[length(names(train.dbs))]='target'
#Run Models
meth = 'ranger'
base.results <- baseline1.1(train, test, meth)
undersample.results <- baseline1.1(train.u, test, meth)
oversample.results <- baseline1.1(train.o, test, meth)
smote.results <- baseline1.1(train.s, test, meth)
bls.results <- baseline1.1(train.bls, test, meth)
dbs.results <- baseline1.1(train.dbs, test, meth)
ans.results <- baseline1.1(train.ans, test, meth)
bag_un = under.ensemble.ranger2(train, test, mm=1.25, repp = repp)
##
#Plot the result
b1 = rbind(t(base.results),
t(oversample.results),
t(smote.results),
t(bls.results),
t(dbs.results),
t(ans.results),
t(undersample.results),
t(bag_un[1:4])
)
row.names(b1)=NULL
b1 = as.data.frame(b1)
b1$method = c('Original', 'ROS', 'SMOTE', 'BLSMOTE', 'DBSMOTE','ANS','Under','BU')
return(b1)
}
no = c(1.5,c(2:183))
for (med in c('ROS', 'ANS','SMOTE','DBSMOTE')){
plot.over(no=no, method=med)
}
version
install.packages('xaringan')
devtools::install_github("gadenbuie/xaringanExtra")
install.packages('devtools')
devtools::install_github("gadenbuie/xaringanExtra")
3+4
3^2
3^2+log(10)+3/2
6^2+10+2
x <- 3
x
y <- c(1, 2, 5)
z <- c('Peter','Julie','Ken')
class(x)
class(y)
class(z)
?class
a <- 2020
b = 2020
x <- c(1, 2, 5)
y <- c(10, 0, 7)
x+y
x-y
x*y
x/y
x
x^2
log(x)
?log
mean(x)
sum(x)
median(x)
sd(x)
min(x)
max(x)
summary(x)
?summary
x <- c(1:2020)
x
x <- c(-2020:2020)
x
x <- rep(1, 1000)
x
x <- rep(c(1,2), 1000)
x
?c
x <- c(1,1,2,3)
x <- (1,1,2,3)
x <- c(1:2020)
sum(x)
sum(c(1:2020))
x <- c(1:2020)
sum(x^2)
sum(x^3)/2020
mean(x^3)
?mean
c(1:10)
seq(1:11, 2)
seq(1, 11, 2)
seq(1, 11, 2)
seq(1, 100, 2)
?seq
x <- c(1, 2019, 2)
x
x <- seq(1, 2019, 2)
x
y <- seq(2, 2020, 2)
x*y
sum(x*y)
x <- c(1:2020)
y <- c(2:2021)
sum(x/y)
x <- c(1:100)^2
x
1/x
sum(1/x)
x <- c(1:1000)^2
sum(1/x)
x <- c(1:10000)^2
sum(1/x)
x <- c(1:100000)^2
sum(1/x)
x <- c(1:2020)
x <- c(1:2020)
# How to create a sequence
x <- rep(c(1,2), 1000)
seq(1:11, 2)
seq(1, 11, 2)
seq(1, 11, 2)
seq(1, 100, 2)
x <- rep(c(1,2), 1000)
seq(1:11, 2)
seq(1, 11, 2)
seq(1, 11, 2)
seq(1, 100, 2)
x <- c(1:2020)
sum(x^2020)
-.1*log(.1, 2)-.9*log(.9, 2)
log(4,2)
-.1*log(.5, 2)-.9*log(.5, 2)
-.1*log(.01, 2)-.9*log(.99, 2)
-.01*log(.01, 2)-.99*log(.99, 2)
knitr::opts_chunk$set(message = FALSE)
library(tidyverse)
df <- read_csv('https://covidtracking.com/data/download/all-states-history.csv')
library(lubridate)
df$date <- ymd(df$date)
class(df$date)
df$month = month(df$date)
# day of the week
df$weekday = wday(df$date)
# day of the month
df$monthday <- mday(df$date)
library(tidyverse)
df$daily_death <- case_when(
df$deathIncrease <3 ~ 'low',
df$deathIncrease <=14 ~ 'medium',
TRUE ~ 'high'
)
library(tidyverse)
x <- c(1:10)
# square root of x
# sqrt(x)
x %>% sqrt
sum(sqrt(x))
x %>% sqrt %>% sum
log(sum(sqrt(x)))
x %>% sqrt %>% sum %>% log
# log base 2 of 16
log(16, 2)
16 %>% log(2)
df %>%
group_by(dataQualityGrade) %>%
summarise(mean(positiveIncrease))
df %>%
group_by(dataQualityGrade) %>%
summarise(median(positiveIncrease))
df %>%
group_by(dataQualityGrade) %>%
summarise(max(positiveIncrease))
df$month3 <- case_when(df$monthday<=10 ~ 'early_month',
df$monthday <=20 ~ 'mid_month',
TRUE ~'end_month')
df %>%
group_by(dataQualityGrade) %>%
summarise(mean(month2))
df
df %>%
group_by(dataQualityGrade) %>%
summarise(mean(month2))
df$dataQualityGrade
table(df$dataQualityGrade)
df %>%
group_by(dataQualityGrade) %>%
summarise(mean(positiveIncrease))
df %>%
group_by(dataQualityGrade) %>%
summarise(mean(weekday))
df %>%
group_by(weekday) %>%
summarise(mean(positiveIncrease))
df %>%
group_by(month3) %>%
summarise(mean(positiveIncrease))
install.packages('gapminder')
library(tidyverse)
source('C:/Users/snguyen4/Dropbox/git/math421/who.R')
source('C:/Users/snguyen4/Dropbox/git/math421/who.R')
p1
source('C:/Users/snguyen4/Dropbox/git/math421/who.R')
install.packages('gifski')
p1
save.image("~/1.RData")
x <- 2
save.image("~/1.RData")
load("~/1.RData")
library(shiny); runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a9_1.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a9_1.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a9_1.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a9_1.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a2_3.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a2.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a2.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a2.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a2_1.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a2_1.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a2.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a2_1.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a2_1.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a2_1.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a2_1.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a2_1.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a2_1.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a2_1.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a2_1.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a2.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a2_1.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a2_1.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/gganimate/shiny_fa20/a9_demonstration/a2_1.R')
-log(.07)
-log(.01)
-log(.001)
-log(.00000001)
library(ggplot2)
library(gganimate)
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_boxplot() +
# Here comes the gganimate code
transition_states(
gear,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
library(caret)
install.packages('caret')
?trainControl
library(caret)
?trainControl
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(tidytext)
library(knitr)
df <- readr::read_csv('data/netflix_titles.csv')
df %>%
head(2) %>%
kable()
df <- readr::read_csv('data/netflix_titles.csv')
# Select data and set target
df <- df %>%
mutate(target = type) %>%
select(target, description)
# Convert text data to numeric variables
a <- recipe(target~description,
data = df) %>%
step_tokenize(description) %>%
step_tokenfilter(description, max_tokens = 5) %>%
step_tfidf(description) %>%
step_normalize(all_numeric_predictors()) %>%
step_smote(target) %>%
prep()
df <- readr::read_csv('data/netflix_titles.csv')
# Select data and set target
df <- df %>%
mutate(target = type) %>%
select(target, description)
# Convert text data to numeric variables
a <- recipe(target~description,
data = df) %>%
step_tokenize(description) %>%
step_tokenfilter(description, max_tokens = 5) %>%
step_tfidf(description) %>%
step_normalize(all_numeric_predictors()) %>%
step_smote(target) %>%
prep()
library(textrecipes)
df <- readr::read_csv('data/netflix_titles.csv')
# Select data and set target
df <- df %>%
mutate(target = type) %>%
select(target, description)
# Convert text data to numeric variables
a <- recipe(target~description,
data = df) %>%
step_tokenize(description) %>%
step_tokenfilter(description, max_tokens = 5) %>%
step_tfidf(description) %>%
step_normalize(all_numeric_predictors()) %>%
step_smote(target) %>%
prep()
library(textrecipes)
library(tidytext)
df <- readr::read_csv('data/netflix_titles.csv')
# Select data and set target
df <- df %>%
mutate(target = type) %>%
select(target, description)
# Convert text data to numeric variables
a <- recipe(target~description,
data = df) %>%
step_tokenize(description) %>%
step_tokenfilter(description, max_tokens = 5) %>%
step_tfidf(description) %>%
step_normalize(all_numeric_predictors()) %>%
step_smote(target) %>%
prep()
library(textrecipes)
library(tidytext)
library(tidyverse)
df <- readr::read_csv('data/netflix_titles.csv')
# Select data and set target
df <- df %>%
mutate(target = type) %>%
select(target, description)
# Convert text data to numeric variables
a <- recipe(target~description,
data = df) %>%
step_tokenize(description) %>%
step_tokenfilter(description, max_tokens = 5) %>%
step_tfidf(description) %>%
step_normalize(all_numeric_predictors()) %>%
step_smote(target) %>%
prep()
??step_smote
library(textrecipes)
library(tidytext)
library(tidyverse)
library(themis)
df <- readr::read_csv('data/netflix_titles.csv')
# Select data and set target
df <- df %>%
mutate(target = type) %>%
select(target, description)
# Convert text data to numeric variables
a <- recipe(target~description,
data = df) %>%
step_tokenize(description) %>%
step_tokenfilter(description, max_tokens = 5) %>%
step_tfidf(description) %>%
step_normalize(all_numeric_predictors()) %>%
step_smote(target) %>%
prep()
df <- juice(a)
# Using Caret for modeling
set.seed(2020)
splitIndex <- createDataPartition(df$target, p = .1,
list = FALSE)
library(textrecipes)
library(tidytext)
library(tidyverse)
library(themis)
library(caret)
df <- readr::read_csv('data/netflix_titles.csv')
# Select data and set target
df <- df %>%
mutate(target = type) %>%
select(target, description)
# Convert text data to numeric variables
a <- recipe(target~description,
data = df) %>%
step_tokenize(description) %>%
step_tokenfilter(description, max_tokens = 5) %>%
step_tfidf(description) %>%
step_normalize(all_numeric_predictors()) %>%
step_smote(target) %>%
prep()
df <- juice(a)
# Using Caret for modeling
set.seed(2020)
splitIndex <- createDataPartition(df$target, p = .1,
list = FALSE)
df_train <- df[ splitIndex,]
df_test <- df[-splitIndex,]
forest_ranger <- train(target~., data=df_train,
method = "ranger")
pred <- predict(forest_ranger, df_test)
cm <- confusionMatrix(data = pred, reference = df_test$target)
cm$overall[1]
d = data.frame(pred = pred, obs = df_test$target)
library(yardstick)
d %>% conf_mat(pred, obs) %>% autoplot
d %>% conf_mat(pred, obs) %>% autoplot
library(textrecipes)
library(tidytext)
library(tidyverse)
library(themis)
library(caret)
df <- readr::read_csv('data/netflix_titles.csv')
# Select data and set target
df <- df %>%
rename(target = type) %>%
select(target, description) %>%
head(2)
library(devtools)
version
install.packages('devtools')
install.packages("devtools")
library(shiny); runApp('C:/Users/snguyen4/Dropbox/git/math421/shiny_fa21/uploaded_data/a3.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/shiny_fa21/uploaded_data/a3_catch.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/shiny_fa21/uploaded_data/a3_catch.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/shiny_fa21/uploaded_data/a3_catch.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/shiny_fa21/uploaded_data/a3_catch.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/shiny_fa21/uploaded_data/a3_catch.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/shiny_fa21/uploaded_data/a3_catch.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/shiny_fa21/uploaded_data/a3_catch.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/shiny_fa21/uploaded_data/a3_catch.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/shiny_fa21/uploaded_data/a3.R')
library(shiny); runApp('C:/Users/snguyen4/Dropbox/git/math421/shiny_fa21/uploaded_data/a3.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/shiny_fa21/uploaded_data/a3_catch.R')
runApp('C:/Users/snguyen4/Dropbox/git/math421/shiny_fa21/uploaded_data/a3_catch.R')
version
version
version
version
version
read.csv("C:\Users\snguyen4\Desktop\math421\WHO-COVID-19-global-data.csv")
read.csv("C:\\Users\snguyen4\\Desktop\\math421\\WHO-COVID-19-global-data.csv")
read.csv("C:/Users/snguyen4/Desktop/math421/WHO-COVID-19-global-data.csv")
d1 <- read.csv("C:/Users/snguyen4/Desktop/math421/WHO-COVID-19-global-data.csv")
str(d1)
str(d1)
View(d1)
names(d1)
names(d1)[1]
names(d1)[1] <- 'Date_report'
d1$Date_report <- as.Date(d1$Date_report)
str(d1)
max(d1$)
max(d1$New_deaths)
max(d1$New_cases)
max(d1$Cumulative_cases)
mean(df$Cumulative_deaths)
mean(d1$Cumulative_deaths)
case_when
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
case_when
d1
d1 <- read.csv("C:/Users/snguyen4/Desktop/math421/WHO-COVID-19-global-data.csv")
names(d1)[1] <- 'Date_report'
d1$Date_report = as.Date(d1$Date_report)
class(d1)
class(d1$Date_report)
month
library(lubridate)
month
month(d1$Date_report)
month(d1$Date_report, label=TRUE)
setwd("C:/Users/snguyen4/Dropbox/git/math421/data")
library(readxl)
df <- read_excel('c2015.xlsx')
library(tidyverse)
df
