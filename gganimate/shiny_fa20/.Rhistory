df$day_type <- case_when(df$day < 6 ~ 'weekday',
TRUE~'weekend')
d1 <- df %>% filter(state %in% c('NY','FL'))%>% group_by(month, state) %>% summarise(mean = mean(positive))
d1 %>% ggplot() + geom_col(aes(y=state, x=mean))
library(tidyverse)
library(knitr)# For knitting document and include_graphics function
library(gganimate)
df <- read_csv('https://covidtracking.com/data/download/all-states-history.csv')
df <- df %>% filter(deathIncrease>0, positiveIncrease>0)
df <- df %>% drop_na(dataQualityGrade)
names(df)[c(3, 6, 24)] <- c('data_qual','d_in', 'pos_in')
library(lubridate)
df$month <- month(df$date, label = TRUE)
df$month2 <- month(df$date)
df$day <- wday(df$date)
df$day_type <- case_when(df$day < 6 ~ 'weekday',
TRUE~'weekend')
d1 <- df %>% filter(state %in% c('NY','FL'))%>% group_by(month, state) %>% summarise(mean = mean(positive))
d1 %>% ggplot() + geom_col(aes(y=state, x=mean))
p1 <- d1 %>% ggplot(aes(y=state, x=mean)) + geom_col()+transition_states(month)+labs(x = 'Total Positive', title = 'Now showing {closest_state}')
animate(p1, nframes=100, fps=20)
d1
# R markdown options
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE,
fig.width = 10,
fig.height = 5,
fig.align = "center",
message = FALSE)
# Load packages
library(gapminder)
library(gganimate)
library(ggplot2)
library(tidyverse)
library(lubridate)
d1 <- df %>%
filter(state %in% c('NY','FL'))%>%
group_by(month, state) %>%
summarise(mean = mean(positive))
d1
d2 <- d1 %>% group_by(month) %>% mutate(rank=rank(-mean)) %>% ungroup()
d3 <- d2 %>% filter(rank <= 10)
d3
d3 %>% ggplot(aes(x=rank, y=mean, group=state, fill=state, label=state)) + geom_col()+
geom_text(aes(y = mean, label = state), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Month {closest_state}', y='', x='', fill='state')
d3 %>% ggplot(aes(x=rank, y=mean, group=state, fill=state, label=state)) + geom_col()+
geom_text(aes(y = mean, label = state), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Month {closest_state}', y='', x='', fill='state')+
transition_states(month2)
d3 %>% ggplot(aes(x=rank, y=mean, group=state, fill=state, label=state)) + geom_col()+
geom_text(aes(y = mean, label = state), hjust = 1.4)+
coord_flip(clip = "off", expand = FALSE) +scale_x_reverse()+
labs(title = 'Month {closest_state}', y='', x='', fill='state')+transition_states(month)
d3 %>% ggplot(aes(x=rank, y=mean, group=state, fill=state, label=state)) + geom_col()+
labs(title = 'Month {closest_state}', y='', x='', fill='state')+transition_states(month)
d2
d1
df <- read_csv('https://covid19.who.int/WHO-COVID-19-global-data.csv')
df
df
df$month <- month(df$Date_reported)
d2 <- df %>%
group_by(month) %>%
mutate(rank=rank(-mean))
d1 <- df %>%
group_by(month, Country) %>%
summarise(mean = mean(positive))
d1 <- df %>%
group_by(month, Country) %>%
summarise(mean = mean(Cumulative_cases))
d2 <- df %>%
group_by(month) %>%
mutate(rank=rank(-mean))
d1
group_by(month, Country) %>%
summarise(mean = mean(Cumulative_cases))
d1 <- df %>%
filter(Cumulative_cases>0) %>%
group_by(month, Country) %>%
summarise(mean = mean(Cumulative_cases))
d2 <- df %>%
group_by(month) %>%
mutate(rank=rank(-mean))
d1 <- df %>%
filter(month>5) %>%
group_by(month, Country) %>%
summarise(mean = mean(Cumulative_cases))
d2 <- df %>%
group_by(month) %>%
mutate(rank=rank(-mean))
d2
d1
group_by(month) %>%
mutate(rank=rank(-mean))
d2 <- df %>%
filter(mean>0) %>%
group_by(month) %>%
mutate(rank=rank(-mean))
d2 <- d1 %>%
filter(mean>0) %>%
group_by(month) %>%
mutate(rank=rank(-mean))
d2
p1 <- d2 %>%
ggplot(aes(x=rank,
y=mean,
group=Country,
fill=Country,
label=Country))+
geom_col()+
geom_text(aes(y = mean,
label = Country),
hjust = 1.4)+
coord_flip(clip = "off",
expand = FALSE)+
scale_x_reverse()+
labs(title='Month {closest_state}',
y='', x='', fill='')+
theme(plot.title =
element_text(hjust=1,size=22),
axis.ticks.y=element_blank(),
axis.text.y=element_blank())+
transition_states(month)+
ease_aes("cubic-in-out")
animate(p1, nframes=100, fps=20)
d2
p1 <- d2 %>% filter(rank <= 10) %>%
ggplot(aes(x=rank,
y=mean,
group=Country,
fill=Country,
label=Country))+
geom_col()+
geom_text(aes(y = mean,
label = Country),
hjust = 1.4)+
coord_flip(clip = "off",
expand = FALSE)+
scale_x_reverse()+
labs(title='Month {closest_state}',
y='', x='', fill='')+
theme(plot.title =
element_text(hjust=1,size=22),
axis.ticks.y=element_blank(),
axis.text.y=element_blank())+
transition_states(month)+
ease_aes("cubic-in-out")
animate(p1, nframes=100, fps=20)
df
d1 <- df %>%
filter(month>5) %>%
group_by(month, Country) %>%
summarise(mean = mean(Cumulative_deaths))
d2 <- d1 %>%
filter(mean>0) %>%
group_by(month) %>%
mutate(rank=rank(-mean))
p1 <- d2 %>% filter(rank <= 10) %>%
ggplot(aes(x=rank,
y=mean,
group=Country,
fill=Country,
label=Country))+
geom_col()+
geom_text(aes(y = mean,
label = Country),
hjust = 1.4)+
coord_flip(clip = "off",
expand = FALSE)+
scale_x_reverse()+
labs(title='Month {closest_state}',
y='', x='', fill='')+
theme(plot.title =
element_text(hjust=1,size=22),
axis.ticks.y=element_blank(),
axis.text.y=element_blank())+
transition_states(month)+
ease_aes("cubic-in-out")
animate(p1, nframes=100, fps=20)
library(tidyverse)
library(lubridate)
df <- read_csv('https://covid19.who.int/WHO-COVID-19-global-data.csv')
df$month <- month(df$Date_reported)
d1 <- df %>%
group_by(month, Country) %>%
summarise(mean = mean(Cumulative_deaths))
d2 <- d1 %>%
filter(mean>0) %>%
group_by(month) %>%
mutate(rank=rank(-mean))
p1 <- d2 %>% filter(rank <= 10) %>%
ggplot(aes(x=rank,
y=mean,
group=Country,
fill=Country,
label=Country))+
geom_col()+
geom_text(aes(y = mean,
label = Country),
hjust = 2)+
coord_flip(clip = "off",
expand = FALSE)+
scale_x_reverse()+
labs(title='Month {closest_state}',
y='', x='', fill='')+
theme(plot.title =
element_text(hjust=1,size=22),
axis.ticks.y=element_blank(),
axis.text.y=element_blank())+
transition_states(month)+
ease_aes("cubic-in-out")
animate(p1, nframes=100, fps=20)
library(tidyverse)
library(lubridate)
df <- read_csv('https://covid19.who.int/WHO-COVID-19-global-data.csv')
df$month <- month(df$Date_reported)
d1 <- df %>%
group_by(month, Country) %>%
summarise(mean = mean(Cumulative_deaths))
d2 <- d1 %>%
filter(mean>0) %>%
group_by(month) %>%
mutate(rank=rank(-mean))
p1 <- d2 %>% filter(rank <= 10) %>%
ggplot(aes(x=rank,
y=mean,
group=Country,
fill=Country,
label=Country))+
geom_col()+
geom_text(aes(y = mean,
label = Country),
hjust = .5)+
coord_flip(clip = "off",
expand = FALSE)+
scale_x_reverse()+
labs(title='Month {closest_state}',
y='', x='', fill='')+
theme(plot.title =
element_text(hjust=1,size=22),
axis.ticks.y=element_blank(),
axis.text.y=element_blank())+
transition_states(month)+
ease_aes("cubic-in-out")
animate(p1, nframes=100, fps=20)
library(tidyverse)
library(lubridate)
df <- read_csv('https://covid19.who.int/WHO-COVID-19-global-data.csv')
df$month <- month(df$Date_reported)
df$week <- week(df$Date_reported)
d1 <- df %>%
group_by(week, Country) %>%
summarise(mean = mean(Cumulative_deaths))
d2 <- d1 %>%
filter(mean>0) %>%
group_by(week) %>%
mutate(rank=rank(-mean))
p1 <- d2 %>% filter(rank <= 10) %>%
ggplot(aes(x=rank,
y=mean,
group=Country,
fill=Country,
label=Country))+
geom_col()+
geom_text(aes(y = mean,
label = Country),
hjust = .5)+
coord_flip(clip = "off",
expand = FALSE)+
scale_x_reverse()+
labs(title='Month {closest_state}',
y='', x='', fill='')+
theme(plot.title =
element_text(hjust=1,size=22),
axis.ticks.y=element_blank(),
axis.text.y=element_blank())+
transition_states(week)+
ease_aes("cubic-in-out")
animate(p1, nframes=100, fps=20)
library(tidyverse)
library(lubridate)
df <- read_csv('https://covid19.who.int/WHO-COVID-19-global-data.csv')
df$month <- month(df$Date_reported)
df$week <- week(df$Date_reported)
d1 <- df %>%
group_by(week, Country) %>%
summarise(mean = mean(Cumulative_deaths))
d2 <- d1 %>%
filter(mean>0) %>%
group_by(week) %>%
mutate(rank=rank(-mean))
p1 <- d2 %>% filter(rank <= 10) %>%
ggplot(aes(x=rank,
y=mean,
group=Country,
fill=Country,
label=Country))+
geom_col()+
geom_text(aes(y = mean,
label = Country),
hjust = .5)+
coord_flip(clip = "off",
expand = FALSE)+
scale_x_reverse()+
labs(title='Month {closest_state}',
y='', x='', fill='')+
theme(plot.title =
element_text(hjust=1,size=22),
axis.ticks.y=element_blank(),
axis.text.y=element_blank())+
transition_states(week)+
ease_aes("cubic-in-out")
animate(p1, nframes=1000)
df = tibble(data.frame(x1=c(1,1,2,2,3,3,3,4,5,5),
x2=c(1,3,2,4,1,2,5,4,2,5),
y=c(1,1,-1,1,-1,-1,1,1,-1,-1)))
library(tidyr)
df = tibble(data.frame(x1=c(1,1,2,2,3,3,3,4,5,5),
x2=c(1,3,2,4,1,2,5,4,2,5),
y=c(1,1,-1,1,-1,-1,1,1,-1,-1)))
knitr::kable(df)
df %>% ggplot(aes(x=x1, y=x2, color=y))+geom_point()
library(tidyr)
library(tidyverse)
library(ggplot2)
df = tibble(data.frame(x1=c(1,1,2,2,3,3,3,4,5,5),
x2=c(1,3,2,4,1,2,5,4,2,5),
y=c(1,1,-1,1,-1,-1,1,1,-1,-1)))
knitr::kable(df)
df %>% ggplot(aes(x=x1, y=x2, color=y))+geom_point()
df %>% ggplot(aes(x=x1, y=x2, color=factor(y)))+geom_point()
df %>% ggplot(aes(x=x1, y=x2, color=factor(y)))+
geom_point()+
geom_hline(yintercept=2.5, linetype="dashed",
color = "red", size=2)
df %>% ggplot(aes(x=x1, y=x2, color=factor(y)))+
geom_point()+
geom_hline(yintercept=2.5, linetype="dashed",
color = "red", size=2)+
labs(color='y')
knitr::include_graphics("stump2.png")
gg_plot_boundary <- function(density, points, title = "") {
ggplot() +
## gg_sample(data = density, size = 1.5, alpha = 0.1, shape = 15) +
gg_sample(data = points) +
gg_density(data = density, z = optimal, breaks = c(0), linetype = 2) +
gg_density(data = density, z = fitted, breaks = c(0)) +
coord_fixed(expand = FALSE) +
xlim(min(density$x), max(density$y)) +
ylim(min(density$y), max(density$y))
}
##' Animate the evolution of a decision boundary as the sample size grows
##'
##' @param sample `data.frame`: the complete sample data; should have
##'     columns `x`, `y`, and `class`
##' @param density `data.frame`: the density distribution of `x` and
##'     `y`; should have columns `x`, `y`, and `optimal`, the contours
##'     of the optimal decision distribution
##' @param delta `integer`: how many points to add at each step of the
##'     animation
##' @param fit_and_predict `function(sample, density)`: fits a learner
##'     to the sample data and returns its predictions on the density
animate_boundary <- function(sample, density, delta, fit_and_predict) {
## a data.frame with successive groups of `data` of size `delta`;
## `data` is randomized before sequencing
sequence_data <- function(data, delta) {
rows <- nrow(data)
n <- rows / delta
data <- data[sample(nrow(data)), ]
go <- function(i) {
h <- min(i * delta, rows)
bind_cols(
head(data, h),
group = rep.int(i, h))
}
sequenced <- bind_rows(lapply(1:n, go))
return(sequenced)
}
## Sequence the sample data
sample_sequenced <- sequence_data(sample, delta)
## Sequence the density data and attach predictions from the sample
density_sequenced <- sample_sequenced %>%
group_by(group) %>%
group_modify(~ fit_and_predict(.x, density)) %>%
ungroup()
## Define the animation
anim <- ggplot() +
## Plot the sample
geom_point(data = sample_sequenced,
aes(x = x, y = y,
color = factor(class),
shape = factor(class)),
size = 3,
alpha = 0.5) +
## Plot the optimal decision boundary
geom_contour(data = density_sequenced,
aes(x, y, z = optimal),
breaks = c(0),
color = "black",
size = 1,
linetype = 2) +
## Plot the fitted decision boundary
geom_contour(data = density_sequenced,
aes(x, y, z = fitted),
breaks = c(0.5),
color = "black",
size = 1) +
coord_fixed(expand = FALSE) +
xlim(min(density$x), max(density$y)) +
ylim(min(density$y), max(density$y)) +
theme_linedraw() +
theme(plot.title = element_text(hjust = 0.5, size = 20),
legend.position = "none",
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
## Animate the sample and the fitted boundary
transition_manual(group)
anim <- animate(anim, renderer = gifski_renderer(),
width = 800, height = 800)
return(anim)
}
lattice_plot_boundary <- function(density, sample, title) {
fitted_class <- ifelse(density[, "fitted"] > 0, 1, 0)
## classes in the feature grid
lattice::xyplot(y ~ x, groups = fitted_class,
data = density,
cex = 1, pch = 20, alpha = 0.1,
aspect = 1) +
## the optimal decision boundary
lattice::contourplot(optimal ~ x + y,
data = density,
at = c(0),
labels = FALSE,
lwd = 3,
lty = 2,
aspect = 1,
main = title) +
## the fitted decision boundary
lattice::contourplot(fitted ~ x + y,
data = density,
at = c(0),
labels = FALSE,
lwd = 3) +
## the sample
lattice::xyplot(y ~ x, groups = class,
data = sample,
pch = 19, alpha = 0.5)
}
lattice::levelplot(p_0 ~ x + y,
contour = TRUE,
region = FALSE,
cuts = 10,
data = density_mvn,
aspect = 1) +
lattice::levelplot(p_1 ~ x + y,
contour = TRUE,
region = FALSE,
cuts = 10,
data = density_mvn)
lattice::levelplot(optimal ~ x + y,
data = density_mvn,
aspect = 1,
cuts = 20,
contour = TRUE) +
lattice::contourplot(optimal ~ x + y,
data = density_mvn,
at = c(0),
labels = FALSE,
lwd = 3)
lattice::levelplot(p_0 ~ x + y,
contour = TRUE,
region = FALSE,
cuts = 5,
data = density_mvn,
aspect = 1) +
lattice::levelplot(p_1 ~ x + y,
contour = TRUE,
region = FALSE,
cuts = 5,
data = density_mvn) +
lattice::contourplot(optimal ~ x + y,
data = density_mvn,
at = c(0),
labels = FALSE,
lwd = 3)
lattice::contourplot(optimal ~ x + y,
data = density_mvn,
at = c(0),
labels = FALSE,
lwd = 3,
aspect = 1) +
lattice::xyplot(y ~ x, groups = class, data = points)
library(shiny); runApp('C:/Users/sonou/Dropbox/git/math421/shiny_fa20/a11.R')
runApp('C:/Users/sonou/Dropbox/git/math421/shiny_fa20/a11.R')
runApp('C:/Users/sonou/Dropbox/git/math421/shiny_fa20/a11.R')
runApp('C:/Users/sonou/Dropbox/git/math421/shiny_fa20/a11.R')
runApp('C:/Users/sonou/Dropbox/git/math421/shiny_fa20/a11.R')
runApp('a11.R')
runApp('C:/Users/sonou/Dropbox/git/math421/shiny_fa20/a11.R')
runApp('C:/Users/sonou/Dropbox/git/math421/shiny_fa20/a4.R')
runApp('C:/Users/sonou/Dropbox/git/math421/shiny_fa20/a11.R')
runApp('C:/Users/sonou/Dropbox/git/math421/shiny_fa20/a10.R')
d
library(tidyverse)
library(shiny)
d <- read_csv('titanic.csv')
setwd("C:/Users/sonou/Dropbox/git/math421/shiny_fa20")
