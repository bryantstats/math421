version
# Running2
id = read.csv('id0.csv')
#Create training (train) and testing (test) datasets
set.seed(2019)
library(caret)
splitIndex <- createDataPartition(id$target, p = .7, list = FALSE, times = 1)
train <- id[ splitIndex,]
test <- id[-splitIndex,]
over.ranger <-function(trainn, testt, mm = 1, method='ROS')
{
# oversampling with different ratio mm
library(caret)
library(ranger)
i0 = trainn[trainn$target=="x0",]
i1 = trainn[trainn$target=="x1",]
set.seed(2019)
i0.over = i0[sample(1:nrow(i0), round(mm*nrow(i1))),]
if(method=='ROS')
{
i1.over = i1[sample(1:nrow(i1), round(mm*nrow(i1)), replace=TRUE),]
train.over = rbind(i0.over, i1.over)
}
if(method=='SMOTE')
{
library(smotefamily)
train.over = rbind(i0.over, i1)
train.over = SMOTE(train.over[,-1], train.over[,1])$data
names(train.over)[length(names(train.over))]='target'
}
if(method=='BLSMOTE')
{
library(smotefamily)
train.over = rbind(i0.over, i1)
train.over = BLSMOTE(train.over[,-1], train.over[,1], method='type1')$data
names(train.over)[length(names(train.over))]='target'
}
if(method=='ANS')
{
library(smotefamily)
train.over = rbind(i0.over, i1)
train.over = ANS(train.over[,-1], train.over[,1])$data
names(train.over)[length(names(train.over))]='target'
}
if(method=='DBSMOTE')
{
library(smotefamily)
train.over = rbind(i0.over, i1)
train.over = DBSMOTE(train.over[,-1], train.over[,1])$data
names(train.over)[length(names(train.over))]='target'
}
modell <- ranger(target~.,data =train.over)
pred = predict(modell, testt)
pp=pred$predictions
cmm=confusionMatrix(data = factor(pp), reference = testt$target, positive = "x1")
perf= c(cmm$overall[1], cmm$byClass[1], cmm$byClass[2], cmm$byClass[11], cmm$byClass[7])
return(perf)
}
## Plot
plot.over = function(no, trainn=train, testt=test, method='ROS')
{
# Plot overfitting for different oversampling method
b.over.train = data.frame()
b.over.test = data.frame()
for (mm in 1:no)
{
print(paste0(method,'  ',mm))
b.over.train = rbind(b.over.train, over.ranger(trainn=trainn, testt=trainn, mm=mm, method=method))
b.over.test = rbind(b.over.test, over.ranger(trainn=trainn, testt=testt, mm=mm, method=method))
}
names(b.over.train)=c('Accuracy', 'Sensitivity', 'Specificity', 'Balanced_Accuracy', 'F1' )
names(b.over.test)=c('Accuracy', 'Sensitivity', 'Specificity', 'Balanced_Accuracy', 'F1' )
b.over.train['Data']=c('Train')
b.over.test['Data']=c('Test')
b.over.train['mm']=c(1:no)
b.over.test['mm']=c(1:no)
b.over = rbind(b.over.train, b.over.test)
for(i in c(1:4)){
print(i)
nam = names(b.over)[i]
pl = ggplot(b.over, aes(x = mm, y = b.over[,i], color = Data))+geom_point()+ylab(nam)
ggsave(paste0(nam,'_',method,'.png'), pl)}
return(b.over)
}
for (med in c('BLSMOTE','ANS','DBSMOTE')){
plot.over(no=183, method=med)
}
for (med in c('ANS','DBSMOTE')){
plot.over(no=183, method=med)
}
is this real life?
set.seed()
bblogdown::
blogdown::serve_site()
version
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
summarise_all
?summarise_all
?summarise_if
setwd("~/Dropbox/git/math421/assignments")
df <- read_csv('../data/imdb_top_1000.csv')
df
df %>% select(across(is.numeric))
df %>% summarise(across(is.numeric()), mean)
df %>% summarise(across(is.numeric), mean)
df %>% select_if(is.numeric)
df %>% select_if(is.numeric) %>% summarise(mean)
df %>% select_if(is.numeric) %>% summarise_all(mean)
df %>% select_if(is.numeric) %>% summarise_all(mean, na.rm)
df %>% select_if(is.numeric) %>% summarise_all(mean, na.rm=TRUE)
df %>% summarise_if(is.numeric, mean)
df %>% summarise_if(!is.numeric, mean)
knitr::opts_chunk$set(message = FALSE)
# Calculate the median of all numeric columns
df %>% summarise_if(is.numeric, mean(na.rm=TRUE))
df %>% summarise_if(is.numeric, mean(na.rm=TRUE))
df %>% summarise_if(is.numeric, mean)
df %>% summarise_if(is.numeric, mean, na.rm=TRUE)
df %>% select_if(is.character)
df %>% select_if(is.character, count)
df %>% select_if(is.character, n_distinct)
df %>% select_if(is.character, n_distinct(.))
df %>% select_if(is.character, ~n_distinct(.))
df %>% select_if(is.character, n_distinct)
df %>% select(Gross)
df %>% select(Certificate) %>% count
df %>% select(Certificate) %>% n_distinct()
df %>% select_if(is.character)
df %>% select_if(is.character) %>% n_distinct()
df %>% select_if(is.character) %>% summarise(n_distinct())
df %>% select_if(is.character) %>% summarise(n_distinct)
df %>% select(Genre) %>% n_distinct()
