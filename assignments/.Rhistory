for (i in c(4:n))
{
th[i-3] = theta1(y[1:i])
}
plot(th,
type = "l",
main = "",
xlab = "n", ylab = "", ylim = c(-.5, .5))
abline(h = mu, col = "red")
par(new=TRUE)
}
###################
theta1 = function(yy)
{
size = length(yy)
theta = .5*yy[1] + .5*mean(yy[2:size])
# theta = .5*yy[1]
return(theta)
}
n = 1000
mu = 0
for (repp in c(1:1))
{
y = rnorm(n, mu, sd = 1)
th = c()
for (i in c(4:n))
{
th[i-3] = theta1(y[1:i])
}
plot(th,
type = "l",
main = "",
xlab = "n", ylab = "", ylim = c(-.5, .5))
abline(h = mu, col = "red")
par(new=TRUE)
}
###################
theta1 = function(yy)
{
size = length(yy)
theta = .5*yy[1] + .5*mean(yy[2:size])
# theta = .5*yy[1]
return(theta)
}
n = 1000
mu = 0
for (repp in c(1:1))
{
y = rnorm(n, mu, sd = 1)
th = c()
for (i in c(4:n))
{
th[i-3] = theta1(y[1:i])
}
plot(th,
type = "l",
main = "",
xlab = "n", ylab = "", ylim = c(-.5, .5))
abline(h = mu, col = "red")
par(new=TRUE)
}
###################
theta1 = function(yy)
{
size = length(yy)
theta = .5*yy[1] + .5*mean(yy[2:size])
# theta = .5*yy[1]
return(theta)
}
n = 1000
mu = 0
for (repp in c(1:1))
{
y = rnorm(n, mu, sd = 1)
th = c()
for (i in c(4:n))
{
th[i-3] = theta1(y[1:i])
}
plot(th,
type = "l",
main = "",
xlab = "n", ylab = "", ylim = c(-.5, .5))
abline(h = mu, col = "red")
par(new=TRUE)
}
###################
theta1 = function(yy)
{
size = length(yy)
theta = .5*yy[1] + .5*mean(yy[2:size])
# theta = .5*yy[1]
return(theta)
}
n = 1000
mu = 0
for (repp in c(1:1))
{
y = rnorm(n, mu, sd = 1)
th = c()
for (i in c(4:n))
{
th[i-3] = theta1(y[1:i])
}
plot(th,
type = "l",
main = "",
xlab = "n", ylab = "", ylim = c(-.5, .5))
abline(h = mu, col = "red")
par(new=TRUE)
}
###################
theta1 = function(yy)
{
size = length(yy)
theta = .5*yy[1] + .5*mean(yy[2:size])
# theta = .5*yy[1]
return(theta)
}
n = 1000
mu = 0
for (repp in c(1:1))
{
y = rnorm(n, mu, sd = 1)
th = c()
for (i in c(4:n))
{
th[i-3] = theta1(y[1:i])
}
plot(th,
type = "l",
main = "",
xlab = "n", ylab = "", ylim = c(-.5, .5))
abline(h = mu, col = "red")
par(new=TRUE)
}
###################
theta1 = function(yy)
{
size = length(yy)
theta = .5*yy[1] + .5*mean(yy[2:size])
# theta = .5*yy[1]
return(theta)
}
n = 1000
mu = 0
for (repp in c(1:1))
{
y = rnorm(n, mu, sd = 1)
th = c()
for (i in c(4:n))
{
th[i-3] = theta1(y[1:i])
}
plot(th,
type = "l",
main = "",
xlab = "n", ylab = "", ylim = c(-.5, .5))
abline(h = mu, col = "red")
par(new=TRUE)
}
###################
theta1 = function(yy)
{
size = length(yy)
theta = .5*yy[1] + .5*mean(yy[2:size])
# theta = .5*yy[1]
return(theta)
}
n = 1000
mu = 0
for (repp in c(1:1))
{
y = rnorm(n, mu, sd = 1)
th = c()
for (i in c(4:n))
{
th[i-3] = theta1(y[1:i])
}
plot(th,
type = "l",
main = "",
xlab = "n", ylab = "", ylim = c(-.5, .5))
abline(h = mu, col = "red")
par(new=TRUE)
}
###################
theta1 = function(yy)
{
size = length(yy)
theta = .5*yy[1] + .5*mean(yy[2:size])
# theta = .5*yy[1]
return(theta)
}
n = 1000
mu = 0
for (repp in c(1:1))
{
y = rnorm(n, mu, sd = 1)
th = c()
for (i in c(4:n))
{
th[i-3] = theta1(y[1:i])
}
plot(th,
type = "l",
main = "",
xlab = "n", ylab = "", ylim = c(-.5, .5))
abline(h = mu, col = "red")
par(new=TRUE)
}
###################
theta1 = function(yy)
{
size = length(yy)
theta = .5*yy[1] + .5*mean(yy[2:size])
# theta = .5*yy[1]
return(theta)
}
n = 1000
mu = 0
for (repp in c(1:1))
{
y = rnorm(n, mu, sd = 1)
th = c()
for (i in c(4:n))
{
th[i-3] = theta1(y[1:i])
}
plot(th,
type = "l",
main = "",
xlab = "n", ylab = "", ylim = c(-.5, .5))
abline(h = mu, col = "red")
par(new=TRUE)
}
###################
theta1 = function(yy)
{
size = length(yy)
theta = .5*yy[1] + .5*mean(yy[2:size])
# theta = .5*yy[1]
return(theta)
}
n = 1000
mu = 0
for (repp in c(1:1))
{
y = rnorm(n, mu, sd = 1)
th = c()
for (i in c(4:n))
{
th[i-3] = theta1(y[1:i])
}
plot(th,
type = "l",
main = "",
xlab = "n", ylab = "", ylim = c(-.5, .5))
abline(h = mu, col = "red")
par(new=TRUE)
}
###################
theta1 = function(yy)
{
size = length(yy)
theta = .5*yy[1] + .5*mean(yy[2:size])
# theta = .5*yy[1]
return(theta)
}
n = 1000
mu = 0
for (repp in c(1:1))
{
y = rnorm(n, mu, sd = 1)
th = c()
for (i in c(4:n))
{
th[i-3] = theta1(y[1:i])
}
plot(th,
type = "l",
main = "",
xlab = "n", ylab = "", ylim = c(-.5, .5))
abline(h = mu, col = "red")
par(new=TRUE)
}
###################
theta1 = function(yy)
{
size = length(yy)
theta = .5*yy[1] + .5*mean(yy[2:size])
# theta = .5*yy[1]
return(theta)
}
n = 1000
mu = 0
for (repp in c(1:1))
{
y = rnorm(n, mu, sd = 1)
th = c()
for (i in c(4:n))
{
th[i-3] = theta1(y[1:i])
}
plot(th,
type = "l",
main = "",
xlab = "n", ylab = "", ylim = c(-.5, .5))
abline(h = mu, col = "red")
par(new=TRUE)
}
###################
theta1 = function(yy)
{
size = length(yy)
theta = .5*yy[1] + .5*mean(yy[2:size])
# theta = .5*yy[1]
return(theta)
}
n = 1000
mu = 0
for (repp in c(1:1))
{
y = rnorm(n, mu, sd = 1)
th = c()
for (i in c(4:n))
{
th[i-3] = theta1(y[1:i])
}
plot(th,
type = "l",
main = "",
xlab = "n", ylab = "", ylim = c(-.5, .5))
abline(h = mu, col = "red")
par(new=TRUE)
}
###################
theta1 = function(yy)
{
size = length(yy)
theta = .5*yy[1] + .5*mean(yy[2:size])
# theta = .5*yy[1]
return(theta)
}
n = 1000
mu = 0
for (repp in c(1:1))
{
y = rnorm(n, mu, sd = 1)
th = c()
for (i in c(4:n))
{
th[i-3] = theta1(y[1:i])
}
plot(th,
type = "l",
main = "",
xlab = "n", ylab = "", ylim = c(-.5, .5))
abline(h = mu, col = "red")
par(new=TRUE)
}
###################
theta1 = function(yy)
{
size = length(yy)
theta = .5*yy[1] + .5*mean(yy[2:size])
# theta = .5*yy[1]
return(theta)
}
n = 1000
mu = 0
for (repp in c(1:1))
{
y = rnorm(n, mu, sd = 1)
th = c()
for (i in c(4:n))
{
th[i-3] = theta1(y[1:i])
}
plot(th,
type = "l",
main = "",
xlab = "n", ylab = "", ylim = c(-.5, .5))
abline(h = mu, col = "red")
par(new=TRUE)
}
###################
theta1 = function(yy)
{
size = length(yy)
theta = .5*yy[1] + .5*mean(yy[2:size])
# theta = .5*yy[1]
return(theta)
}
n = 1000
mu = 0
for (repp in c(1:1))
{
y = rnorm(n, mu, sd = 1)
th = c()
for (i in c(4:n))
{
th[i-3] = theta1(y[1:i])
}
plot(th,
type = "l",
main = "",
xlab = "n", ylab = "", ylim = c(-.5, .5))
abline(h = mu, col = "red")
par(new=TRUE)
}
par(new=FALSE)
n = 10000
mu = 0
for (repp in c(1:100))
{
y = rnorm(n, mu, sd = 1)
plot(cumsum(y)/c(1:n),
type = "l",
main = "y_bar", ylim = c(-0.5,0.5),
xlab = "n", ylab = "y_bar")
abline(h = mu, col = "red")
par(new=TRUE)
}
par(new=FALSE)
theta1 = function(yy)
{
size = length(yy)
theta = .5*yy[1] + .5*mean(yy[2:size])
# theta = .5*yy[1]
return(theta)
}
n = 1000
mu = 0
for (repp in c(1:100))
{
y = rnorm(n, mu, sd = 1)
th = c()
for (i in c(4:n))
{
th[i-3] = theta1(y[1:i])
}
plot(th,
type = "l",
main = "",
xlab = "n", ylab = "", ylim = c(-.5, .5))
abline(h = mu, col = "red")
par(new=TRUE)
}
install.packages('textrecipes')
knitr::opts_chunk$set(message = FALSE, warning = FALSE, cache = TRUE)
library(RedditExtractoR)
library(tidytext)
library(ggpubr)
library(tidyverse)
library(knitr)
library(lubridate)
df <- find_thread_urls(sort_by="new", subreddit = 'college')
library(RedditExtractoR)
library(tidytext)
library(ggpubr)
library(tidyverse)
library(knitr)
library(lubridate)
df <- find_thread_urls(sort_by="new", subreddit = 'office')
df
write_csv(df, "reddit_office.csv")
library(RedditExtractoR)
library(tidytext)
library(ggpubr)
library(tidyverse)
library(knitr)
library(lubridate)
df <- find_thread_urls(sort_by="new", subreddit = 'forest')
write_csv(df, "reddit_forest.csv")
salary = c(100, 90, 70, 120, 200)
var(salary)
salary2 = c(100000, 90000, 70000, 120000, 200000)
var(salary2)
mode_impute <- function(x)
{
if(!is.numeric(x))
{
# Find the mode of x
mode_of_x <- names(sort(-table(x)))[1]
# Replace the missing by the mode
library(tidyr)
x <- replace_na(x, mode_of_x)
}
return(x)
}
library(tidyverse)
df <- read_csv('titanic.csv')
source("C:/Users/snguyen4/Dropbox/git/math421/assignments/a16_fixing.R")
library(tidyverse)
df <- read_csv('titanic.csv')
setwd("C:/Users/snguyen4/Dropbox/git/math421/assignments")
library(tidyverse)
df <- read_csv('titanic.csv')
x1 <- mode_impute(df$Embarked)
sum(is.na(x1))
categorical_impute <- function(d)
{
for (i in 1:length(d))
{
d[[i]] <- mode_impute(d[[i]])
}
return(d)
}
categorical_impute(df)
d1 = categorical_impute(df)
colSums(is.na(d1))
